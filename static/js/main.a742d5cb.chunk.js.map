{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["links","title","href","App","Container","Helmet","property","content","Header","ProfileImage","email","size","Buttons","map","ButtonContainer","Button","width","variant","styled","div","a","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"i8CAOA,IAAMA,EAAQ,CACZ,CAAEC,MAAO,WAAYC,KAAM,uCAC3B,CAAED,MAAO,SAAUC,KAAM,gCACzB,CACED,MAAO,yBACPC,KACE,2EAEJ,CAAED,MAAO,qBAAsBC,KAAM,kCAwCxBC,MArCf,WACE,OACE,kBAACC,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,0BACEC,SAAS,WACTC,QAAQ,uFAEV,0BAAMD,SAAS,WAAWC,QAAQ,sCAClC,0BACED,SAAS,iBACTC,QAAQ,oIAGZ,kBAACC,EAAD,KACE,6CACA,wDAEF,kBAACC,EAAD,KACE,kBAAC,IAAD,CAAUC,MAAM,iBAAiBC,KAAM,OAEzC,kBAACC,EAAD,KACGC,aACC,gBAAGZ,EAAH,EAAGA,MAAOC,EAAV,EAAUA,KAAV,OACE,kBAACY,EAAD,KACE,kBAACC,EAAD,CAAQb,KAAMA,EAAMc,MAAM,OAAOC,QAAQ,WACtChB,MAIPD,MASJI,EAAYc,IAAOC,IAAV,KAMTX,EAASU,IAAOC,IAAV,KAKNV,EAAeS,IAAOC,IAAV,KAKZP,EAAUM,IAAOC,IAAV,KAIPL,EAAkBI,IAAOC,IAAV,KAQfJ,EAASG,IAAOE,EAAV,KCzEQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAeC,MAAOA,KACtB,kBAAC,EAAD,QAGFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a742d5cb.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport { Helmet } from \"react-helmet\";\nimport Gravatar from \"react-gravatar\";\nimport { map } from \"ramda\";\nimport styled from \"styled-components\";\n\nconst links = [\n  { title: \"LinkedIn\", href: \"http://linkedin.com/in/nickprokesch\" },\n  { title: \"GitHub\", href: \"https://github.com/prokizzle\" },\n  {\n    title: \"Professional CV/Resume\",\n    href:\n      \"https://prokizzle-cv.s3.amazonaws.com/Nick_Prokesch_VisualCV_Resume.pdf\",\n  },\n  { title: \"My Medium Articles\", href: \"https://medium.com/@nprokesch\" },\n];\n\nfunction App() {\n  return (\n    <Container>\n      <Helmet>\n        <meta\n          property=\"og:image\"\n          content=\"https://www.gravatar.com/avatar/c851ad317391baf69de8f139a9201f0e?d=retro&r=g&s=600\"\n        />\n        <meta property=\"og:title\" content=\"Nick Prokesch | Software Engineer\" />\n        <meta\n          property=\"og:description\"\n          content=\"A front-end software engineer with a passion for fitness, mental health, solving problems, and getting outside my comfort zone\"\n        />\n      </Helmet>\n      <Header>\n        <h1>Nick Prokesch</h1>\n        <h2>Front-end Web Developer</h2>\n      </Header>\n      <ProfileImage>\n        <Gravatar email=\"nick@prokes.ch\" size={200} />\n      </ProfileImage>\n      <Buttons>\n        {map(\n          ({ title, href }) => (\n            <ButtonContainer>\n              <Button href={href} width=\"100%\" variant=\"primary\">\n                {title}\n              </Button>\n            </ButtonContainer>\n          ),\n          links\n        )}\n      </Buttons>\n    </Container>\n  );\n}\n\nexport default App;\n\nconst Container = styled.div`\n  display: flex;\n  padding: 5px;\n  flex-direction: column;\n`;\n\nconst Header = styled.div`\n  flex: 1;\n  text-align: center;\n`;\n\nconst ProfileImage = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nconst Buttons = styled.div`\n  margin-top: 15px;\n`;\n\nconst ButtonContainer = styled.div`\n  padding: 5px;\n  flex: 1;\n  display: flex;\n  justify-content: center;\n  text-align: center;\n`;\n\nconst Button = styled.a`\n  background-color: #007bc7;\n  color: white;\n  padding-top: 5px;\n  padding-bottom: 5px;\n  padding-right: 15px;\n  padding-left: 15px;\n  flex: 1;\n  text-decoration: none;\n\n  &:hover {\n    background-color: inherit;\n    border: 1px solid #007bc7;\n    color: black;\n  }\n\n  @media only screen and (max-width: 480px) {\n    width: 300px;\n    max-width: 300px;\n  }\n\n  @media only screen and (min-width: 480px) {\n    width: 400px;\n    max-width: 400px;\n  }\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ThemeProvider } from 'styled-components'\nimport theme from '@rebass/preset'\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}