{"version":3,"sources":["reducers/global.reducer.js","reducers/projects.reducer.js","reducers/root.reducer.js","actions/global.actions.js","components/GlobalNav/index.jsx","components/Hero/index.jsx","actions/projects.actions.js","components/Projects/index.jsx","components/Technologies/index.jsx","components/SocialProfiles/index.js","components/Home/index.jsx","components/App/index.js","serviceWorker.js","index.js"],"names":["initialState","menuOpened","globalReducer","state","arguments","length","undefined","type","repos","projectsReducer","store","rootReducer","combineReducers","global","projects","TOGGLE_MENU","GlobalNav","currentTab","this","props","location","pathname","replace","_this$props","isOpen","toggleMenuAction","react_default","a","createElement","Navbar","dark","color","expand","NavbarBrand","href","NavbarToggler","onClick","Collapse","navbar","Nav","className","id","label","url","map","navItem","i","navItemClass","classNames","active","NavItem","key","NavLink","to","PureComponent","defaultProps","connect","_ref","dispatch","toggleMenu","lib_default","imageSrc","Row","Col","name","skill","Badge","Projects","fetchProjectRepos","Container","logo","Card","CardBody","react_fontawesome_index_es","icon","size","CardTitle","profile","Home","components_GlobalNav","Hero_default","SocialProfiles_default","components_Projects","Technologies_default","App","components_Home","Boolean","window","hostname","match","library","add","fab","createStore","ReactDOM","render","es","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1f08ac50.chunk.js","sourcesContent":["const initialState = { menuOpened: false };\n\nfunction globalReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"TOGGLE_MENU\":\n      return { menuOpened: !state.menuOpened };\n    default:\n      return state;\n  }\n}\n\nexport default globalReducer;\n","const initialState = { repos: [] };\n\nconst projectsReducer = (store = initialState, action) => {\n  switch(action.type) {\n    default: {\n      return store;\n    }\n  }\n}\n\nexport default projectsReducer;\n","import { combineReducers } from \"redux\";\nimport globalReducer from \"./global.reducer\";\nimport projectsReducer from \"./projects.reducer\";\n\nconst rootReducer = combineReducers({\n  global: globalReducer,\n  projects: projectsReducer,\n});\n\nexport default rootReducer;\n","export const TOGGLE_MENU = \"TOGGLE_MENU\";\nexport const RESET_MENU = \"RESET_MENU\";\n\nexport function toggleMenu(payload = {}) {\n  return { type: TOGGLE_MENU };\n}\n\nexport function reset() {\n  return { type: RESET_MENU };\n}\n","import React, { PureComponent } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport classNames from \"classnames\";\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink } from \"reactstrap\";\nimport { toggleMenu } from \"../../actions/global.actions\";\n\nclass GlobalNav extends PureComponent {\n  render() {\n    const navs = [\n      { id: 0, label: \"Email Me\", url: \"mailto:nick@prokes.ch\" },\n      {\n        id: 1,\n        label: \"Resume/CV\",\n        url: \"https://s3.amazonaws.com/prokizzle-cv/Nick_Prokesch_visualcv_resume.pdf\",\n      },\n      { id: 2, label: \"Schedule a Call\", url: \"https://calendly.com/prokizzle\" },\n    ];\n\n    const {\n      location: { pathname },\n    } = this.props;\n    \n    const currentTab = pathname.replace(\"/\", \"\");\n    \n    const { isOpen, toggleMenuAction } = this.props;\n    \n    return (\n      <Navbar dark color=\"dark\" expand=\"md\">\n        <NavbarBrand href=\"/\">nick.prokes.ch</NavbarBrand>\n        <NavbarToggler onClick={toggleMenuAction} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"ml-auto\" navbar>\n            {navs.map((navItem, i) => {\n              const navItemClass = classNames({ active: currentTab === navItem.url });\n              return (\n                <NavItem className={navItemClass} key={navItem.id}>\n                  <NavLink to={navItem.url}>{navItem.label}</NavLink>\n                </NavItem>\n              );\n            })}\n          </Nav>\n        </Collapse>\n      </Navbar>\n    );\n  }\n}\n\nGlobalNav.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string,\n  }),\n  isOpen: PropTypes.bool,\n  toggleMenuAction: PropTypes.func.isRequired,\n};\n\nGlobalNav.defaultProps = {\n  location: {\n    pathname: \"\",\n  },\n  isOpen: false,\n};\n\nconst mapStateToProps = ({ menuOpened }) => ({ isOpen: menuOpened });\n\nconst mapDispatchToProps = dispatch => ({\n  toggleMenuAction: () => dispatch(toggleMenu()),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GlobalNav);\n","import React, { PureComponent } from \"react\";\nimport { Badge, Col, Row } from \"reactstrap\";\nimport LazyHero from \"react-lazy-hero\";\n\nexport default class extends PureComponent {\n  render() {\n    const skills = [\n      { id: 0, name: \"react\" },\n      { id: 1, name: \"redux\" },\n      { id: 2, name: \"ruby on rails\" },\n      { id: 3, name: \"javascript\" },\n      { id: 4, name: \"CSS3\" },\n      { id: 5, name: \"HTML5\" },\n    ];\n    return (\n      <LazyHero imageSrc=\"https://unsplash.it/2000/1000\">\n        <h1>Nick Prokesch</h1>\n        <div className=\"text-center\">\n          <Row>\n            <Col>\n              {skills.map(skill => (\n                <Badge key={skill.id} className=\"mr-1\">\n                  {skill.name}\n                </Badge>\n              ))}\n            </Col>\n          </Row>\n        </div>\n      </LazyHero>\n    );\n  }\n}\n","const FETCH_REPOS = \"FETCH_REPOS\";\nconst UPDATE_REPOS = \"UPDATE_REPOS\";\n\nexport function fetchRepos(user) {\n  fetch(`https://api.github.com/users/${user}/repos`).then(data => updateRepos(data));\n}\n\nexport function updateRepos(repos) {\n  return { type: UPDATE_REPOS, repos };\n}\n\nexport default { fetchRepos, updateRepos };\n","import React, { PureComponent } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { fetchRepos } from \"../../actions/projects.actions\";\n\nclass Projects extends PureComponent {\n  static propTypes = {\n    fetchProjectRepos: PropTypes.func,\n  };\n\n  static defaultProps = {\n    fetchProjectRepos: () => {}\n  }\n\n  componentDidMount() {\n    const { fetchProjectRepos } = this.props;\n    fetchProjectRepos();\n  }\n\n  render() {\n    const projects = [];\n    if (projects.length === 0) return <div />;\n    return (\n      <div>\n        <h2>Projects</h2>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = () => ({});\nconst mapDispatchToProps = dispatch => ({ fetchProjectRepos: () => dispatch(fetchRepos()) });\n\nexport default Projects;\n","import React, { PureComponent } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Container, Row, Col, Card, CardBody, CardTitle } from \"reactstrap\";\n\nexport default class extends PureComponent {\n  render() {\n    const technologies = [\n      { id: 0, name: \"React.js\", logo: \"react\" },\n      { id: 1, name: \"FontAwesome\", logo: \"font-awesome\" },\n      { id: 2, name: \"HTML5\", logo: \"html5\" },\n      { id: 3, name: \"SASS\", logo: \"sass\" },\n    ];\n    return (\n      <Container className=\"my-5\">\n        <h3>Technologies Used on This Page</h3>\n        <Row>\n          {technologies.map(({ name, id, logo }) => (\n            <Col key={id}>\n              <Card className=\"shadow my-2\">\n                <CardBody>\n                  <FontAwesomeIcon icon={[\"fab\", logo]} size=\"3x\" />\n                  <CardTitle>{name}</CardTitle>\n                </CardBody>\n              </Card>\n            </Col>\n          ))}\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport { Card, CardBody, CardTitle, Col, Row, Container } from \"reactstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nexport default class extends PureComponent {\n  render() {\n    const profiles = [\n      { id: 0, name: \"Github\", logo: \"github\", url: \"https://github.com/prokizzle\" },\n      { id: 1, name: \"LinkedIn\", logo: \"linkedin\", url: \"https://github.com/prokizzle\" },\n      { id: 2, name: \"Instagram\", logo: \"instagram\", url: \"https://github.com/prokizzle\" },\n      { id: 3, name: \"StackOverflow\", logo: \"stack-overflow\", url: \"https://github.com/prokizzle\" },\n      { id: 4, name: \"Medium\", logo: \"medium\", url: \"https://github.com/prokizzle\" },\n    ];\n    return (\n      <Container className=\"my-5\">\n        <div className=\"py-1\">\n          <h3>Where you can find me</h3>\n        </div>\n        <Row>\n          {profiles.map(profile => (\n            <Col key={profile.id}>\n              <Card className=\"shadow my-1\">\n                <CardBody>\n                  <FontAwesomeIcon icon={[\"fab\", profile.logo]} size=\"3x\" />\n                </CardBody>\n                <CardTitle>{profile.name}</CardTitle>\n              </Card>\n            </Col>\n          ))}\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React, { PureComponent } from \"react\";\nimport GlobalNav from \"../GlobalNav\";\nimport Hero from \"../Hero\";\nimport Projects from \"../Projects\";\nimport Technologies from \"../Technologies\";\nimport SocialProfiles from \"../SocialProfiles\";\n\nclass Home extends PureComponent {\n  render() {\n    return (\n      <div>\n        <GlobalNav {...this.props} />\n\n        <Hero />\n\n        <SocialProfiles />\n        <Projects />\n        <Technologies />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { PureComponent } from \"react\";\nimport \"bootstrap\";\n\nimport \"./App.scss\";\nimport Home from \"../Home\";\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <div className=\"App\">\n        <Home />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport \"./index.scss\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { fab } from \"@fortawesome/free-brands-svg-icons\";\nimport rootReducer from \"./reducers/root.reducer\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlibrary.add(fab);\n\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}